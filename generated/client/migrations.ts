export default [
  {
    "statements": [
      "CREATE TABLE \"items\" (\n  \"id\" TEXT NOT NULL,\n  \"slug\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"price\" INTEGER NOT NULL,\n  \"description\" TEXT NOT NULL,\n  CONSTRAINT \"items_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.items', 1);",
      "  /* Triggers for table items */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_items_primarykey;",
      "CREATE TRIGGER update_ensure_main_items_primarykey\n  BEFORE UPDATE ON \"main\".\"items\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_items_into_oplog;",
      "CREATE TRIGGER insert_main_items_into_oplog\n   AFTER INSERT ON \"main\".\"items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'INSERT', json_object('id', new.\"id\"), json_object('description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'price', new.\"price\", 'slug', new.\"slug\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_items_into_oplog;",
      "CREATE TRIGGER update_main_items_into_oplog\n   AFTER UPDATE ON \"main\".\"items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'UPDATE', json_object('id', new.\"id\"), json_object('description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'price', new.\"price\", 'slug', new.\"slug\"), json_object('description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'price', old.\"price\", 'slug', old.\"slug\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_items_into_oplog;",
      "CREATE TRIGGER delete_main_items_into_oplog\n   AFTER DELETE ON \"main\".\"items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'price', old.\"price\", 'slug', old.\"slug\"), NULL);\nEND;"
    ],
    "version": "1"
  },
  {
    "statements": [
      "CREATE TABLE \"orders\" (\n  \"id\" TEXT NOT NULL,\n  \"recipient_name\" TEXT NOT NULL,\n  \"delivery_address\" TEXT NOT NULL,\n  \"delivery_postcode\" TEXT NOT NULL,\n  \"delivery_country\" TEXT NOT NULL,\n  \"delivery_price\" INTEGER NOT NULL,\n  \"status\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  CONSTRAINT \"orders_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX IF NOT EXISTS \"orders_created_at_idx\" ON \"orders\" (\"created_at\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.orders', 1);",
      "  /* Triggers for table orders */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_orders_primarykey;",
      "CREATE TRIGGER update_ensure_main_orders_primarykey\n  BEFORE UPDATE ON \"main\".\"orders\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_orders_into_oplog;",
      "CREATE TRIGGER insert_main_orders_into_oplog\n   AFTER INSERT ON \"main\".\"orders\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orders')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orders', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'delivery_address', new.\"delivery_address\", 'delivery_country', new.\"delivery_country\", 'delivery_postcode', new.\"delivery_postcode\", 'delivery_price', new.\"delivery_price\", 'id', new.\"id\", 'recipient_name', new.\"recipient_name\", 'status', new.\"status\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_orders_into_oplog;",
      "CREATE TRIGGER update_main_orders_into_oplog\n   AFTER UPDATE ON \"main\".\"orders\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orders')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orders', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'delivery_address', new.\"delivery_address\", 'delivery_country', new.\"delivery_country\", 'delivery_postcode', new.\"delivery_postcode\", 'delivery_price', new.\"delivery_price\", 'id', new.\"id\", 'recipient_name', new.\"recipient_name\", 'status', new.\"status\"), json_object('created_at', old.\"created_at\", 'delivery_address', old.\"delivery_address\", 'delivery_country', old.\"delivery_country\", 'delivery_postcode', old.\"delivery_postcode\", 'delivery_price', old.\"delivery_price\", 'id', old.\"id\", 'recipient_name', old.\"recipient_name\", 'status', old.\"status\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_orders_into_oplog;",
      "CREATE TRIGGER delete_main_orders_into_oplog\n   AFTER DELETE ON \"main\".\"orders\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orders')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orders', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'delivery_address', old.\"delivery_address\", 'delivery_country', old.\"delivery_country\", 'delivery_postcode', old.\"delivery_postcode\", 'delivery_price', old.\"delivery_price\", 'id', old.\"id\", 'recipient_name', old.\"recipient_name\", 'status', old.\"status\"), NULL);\nEND;"
    ],
    "version": "2"
  },
  {
    "statements": [
      "CREATE TABLE \"basket_items\" (\n  \"id\" TEXT NOT NULL,\n  \"item_id\" TEXT NOT NULL,\n  \"quantity\" INTEGER NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  \"order_id\" TEXT,\n  \"purchased_price\" INTEGER,\n  CONSTRAINT \"basket_items_item_id_fkey\" FOREIGN KEY (\"item_id\") REFERENCES \"items\" (\"id\") ON DELETE SET NULL,\n  CONSTRAINT \"basket_items_order_id_fkey\" FOREIGN KEY (\"order_id\") REFERENCES \"orders\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"basket_items_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX IF NOT EXISTS \"basket_items_order_id_idx\" ON \"basket_items\" (\"order_id\" ASC);\n",
      "CREATE INDEX IF NOT EXISTS \"basket_items_item_id_idx\" ON \"basket_items\" (\"item_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.basket_items', 1);",
      "  /* Triggers for table basket_items */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_basket_items_primarykey;",
      "CREATE TRIGGER update_ensure_main_basket_items_primarykey\n  BEFORE UPDATE ON \"main\".\"basket_items\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_basket_items_into_oplog;",
      "CREATE TRIGGER insert_main_basket_items_into_oplog\n   AFTER INSERT ON \"main\".\"basket_items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.basket_items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'basket_items', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'item_id', new.\"item_id\", 'order_id', new.\"order_id\", 'purchased_price', new.\"purchased_price\", 'quantity', new.\"quantity\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_basket_items_into_oplog;",
      "CREATE TRIGGER update_main_basket_items_into_oplog\n   AFTER UPDATE ON \"main\".\"basket_items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.basket_items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'basket_items', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'item_id', new.\"item_id\", 'order_id', new.\"order_id\", 'purchased_price', new.\"purchased_price\", 'quantity', new.\"quantity\"), json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'item_id', old.\"item_id\", 'order_id', old.\"order_id\", 'purchased_price', old.\"purchased_price\", 'quantity', old.\"quantity\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_basket_items_into_oplog;",
      "CREATE TRIGGER delete_main_basket_items_into_oplog\n   AFTER DELETE ON \"main\".\"basket_items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.basket_items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'basket_items', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'item_id', old.\"item_id\", 'order_id', old.\"order_id\", 'purchased_price', old.\"purchased_price\", 'quantity', old.\"quantity\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_basket_items_item_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_basket_items_item_id_into_oplog\n  AFTER INSERT ON \"main\".\"basket_items\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'items', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"items\" WHERE \"id\" = new.\"item_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_basket_items_item_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_basket_items_item_id_into_oplog\n   AFTER UPDATE ON \"main\".\"basket_items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'items', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"items\" WHERE \"id\" = new.\"item_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_basket_items_order_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_basket_items_order_id_into_oplog\n  AFTER INSERT ON \"main\".\"basket_items\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orders') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'orders', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"orders\" WHERE \"id\" = new.\"order_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_basket_items_order_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_basket_items_order_id_into_oplog\n   AFTER UPDATE ON \"main\".\"basket_items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orders') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'orders', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"orders\" WHERE \"id\" = new.\"order_id\";\nEND;"
    ],
    "version": "3"
  }
]